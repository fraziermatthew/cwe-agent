{
  "cwe_id": "89",
  "cwe_title": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
  "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
  "language": "python",
  "student_file": "student_code2.py",
  "course_excerpt": "CMSC\n \n426:\n \nSoftware\n \nas\n \na\n \nService\n \nFall\n \n2024\n \nSyllabus\n \n \n \nCatalog\n \nListing:\n \n \nCMSC\n \n426\n \n-\n \nSoftware\n \nas\n \na\n \nService\n \nCourse\n \nLevel:\n \n \n \nUndergraduate\n \nPrerequisites:\n \n \nCMSC\n \n355\n \nwith\n \na\n \ngrade\n \nof\n \nC\n \nor\n \nbetter\n \n \nInstructor:\n \n       \n \nDr.\n \nKosta\n \nDamevski\n \n(\nhttp://damevski.github.io\n)\n \nOffice:\n                \n \nERB\n \n2324\n \nPhone:\n               ",
  "assignment_excerpt": "[CMSC 455] Assignment #2: REST APIs\nDue: End of Day, September 26th, 2024\nObjective: The objective of this assignment is to create a microservice s application for grocery shopping.\nStudentswilldeveloptwoFlaskmicroservices, ”ProductSe rvice”and”CartService,”withspeciﬁcendpoints.\nThey will also deploy both services on the Render platform. T his assignment will help students gain practical\nexperienc",
  "output": {
    "cwe_id": "89",
    "cwe_title": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "modified_code": "from flask import Flask, jsonify, request\n\n\napp = Flask(__name__)\n\n\n# Sample data\nproducts = [\n    {\"id\": 1, \"name\": \"Apple\", \"price\": 0.5, \"quantity\": 100},\n    {\"id\": 2, \"name\": \"Banana\", \"price\": 0.3, \"quantity\": 150},\n]\n\n\n@app.route('/products', methods=['GET'])\ndef get_products():\n    return jsonify(products)\n\n\n@app.route('/products/<int:product_id>', methods=['GET'])\ndef get_product(product_id):\n    product = next((p for p in products if p[\"id\"] == product_id), None)\n    return jsonify(product) if product else ('', 404)\n\n\n@app.route('/products', methods=['POST'])\ndef add_product():\n    new_product = request.json\n    new_product['id'] = len(products) + 1\n    # Vulnerability introduced here: using user input directly\n    products.append(new_product)\n    return jsonify(new_product), 201\n\n\n@app.route('/products/search', methods=['GET'])\ndef search_product():\n    search_name = request.args.get('name')\n    # SQL Injection vulnerability: directly using user input without sanitization\n    result = [p for p in products if search_name in p['name']]\n    return jsonify(result)\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=5000)\n",
    "injection_notes": "A new endpoint '/products/search' was added that allows searching for products by name using user input directly, which can lead to SQL injection if this were to interact with a database."
  }
}
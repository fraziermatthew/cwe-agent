{
  "cwe_id": "79",
  "cwe_title": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
  "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
  "language": "python",
  "student_file": "student_code2.py",
  "course_excerpt": "CMSC\n \n426:\n \nSoftware\n \nas\n \na\n \nService\n \nFall\n \n2024\n \nSyllabus\n \n \n \nCatalog\n \nListing:\n \n \nCMSC\n \n426\n \n-\n \nSoftware\n \nas\n \na\n \nService\n \nCourse\n \nLevel:\n \n \n \nUndergraduate\n \nPrerequisites:\n \n \nCMSC\n \n355\n \nwith\n \na\n \ngrade\n \nof\n \nC\n \nor\n \nbetter\n \n \nInstructor:\n \n       \n \nDr.\n \nKosta\n \nDamevski\n \n(\nhttp://damevski.github.io\n)\n \nOffice:\n                \n \nERB\n \n2324\n \nPhone:\n               ",
  "assignment_excerpt": "[CMSC 455] Assignment #2: REST APIs\nDue: End of Day, September 26th, 2024\nObjective: The objective of this assignment is to create a microservice s application for grocery shopping.\nStudentswilldeveloptwoFlaskmicroservices, ”ProductSe rvice”and”CartService,”withspeciﬁcendpoints.\nThey will also deploy both services on the Render platform. T his assignment will help students gain practical\nexperienc",
  "output": {
    "cwe_id": "79",
    "cwe_title": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "modified_code": "from flask import Flask, jsonify, request\n\n\napp = Flask(__name__)\n\n\n# Sample data\nproducts = [\n    {\"id\": 1, \"name\": \"Apple\", \"price\": 0.5, \"quantity\": 100},\n    {\"id\": 2, \"name\": \"Banana\", \"price\": 0.3, \"quantity\": 150},\n]\n\n\n@app.route('/products', methods=['GET'])\ndef get_products():\n    return jsonify(products)\n\n\n@app.route('/products/<int:product_id>', methods=['GET'])\ndef get_product(product_id):\n    product = next((p for p in products if p[\"id\"] == product_id), None)\n    return jsonify(product) if product else ('', 404)\n\n\n@app.route('/products', methods=['POST'])\ndef add_product():\n    new_product = request.json\n    new_product['id'] = len(products) + 1\n    products.append(new_product)\n    return jsonify({\"name\": new_product['name']}), 201\n\n\n@app.route('/products/<string:name>', methods=['GET'])\ndef get_product_by_name(name):\n    # This endpoint introduces a XSS vulnerability by not sanitizing the input\n    return f'<h1>Product: {name}</h1>'\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=5000)",
    "injection_notes": "A new endpoint '/products/<string:name>' was added that returns an HTML response using the unsanitized 'name' input, creating a Cross-site Scripting (XSS) vulnerability."
  }
}
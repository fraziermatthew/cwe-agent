{
  "cwe_id": "119",
  "cwe_title": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
  "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
  "language": "python",
  "student_file": "student_code2.py",
  "course_excerpt": "CMSC\n \n426:\n \nSoftware\n \nas\n \na\n \nService\n \nFall\n \n2024\n \nSyllabus\n \n \n \nCatalog\n \nListing:\n \n \nCMSC\n \n426\n \n-\n \nSoftware\n \nas\n \na\n \nService\n \nCourse\n \nLevel:\n \n \n \nUndergraduate\n \nPrerequisites:\n \n \nCMSC\n \n355\n \nwith\n \na\n \ngrade\n \nof\n \nC\n \nor\n \nbetter\n \n \nInstructor:\n \n       \n \nDr.\n \nKosta\n \nDamevski\n \n(\nhttp://damevski.github.io\n)\n \nOffice:\n                \n \nERB\n \n2324\n \nPhone:\n               ",
  "assignment_excerpt": "[CMSC 455] Assignment #2: REST APIs\nDue: End of Day, September 26th, 2024\nObjective: The objective of this assignment is to create a microservice s application for grocery shopping.\nStudentswilldeveloptwoFlaskmicroservices, ”ProductSe rvice”and”CartService,”withspeciﬁcendpoints.\nThey will also deploy both services on the Render platform. T his assignment will help students gain practical\nexperienc",
  "output": {
    "cwe_id": "119",
    "cwe_title": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "modified_code": "from flask import Flask, jsonify, request\n\n\napp = Flask(__name__)\n\n\n# Sample data\nproducts = [\n    {\"id\": 1, \"name\": \"Apple\", \"price\": 0.5, \"quantity\": 100},\n    {\"id\": 2, \"name\": \"Banana\", \"price\": 0.3, \"quantity\": 150},\n]\n\n\n@app.route('/products', methods=['GET'])\ndef get_products():\n    return jsonify(products)\n\n\n@app.route('/products/<int:product_id>', methods=['GET'])\ndef get_product(product_id):\n    product = next((p for p in products if p[\"id\"] == product_id), None)\n    return jsonify(product) if product else ('', 404)\n\n\n@app.route('/products', methods=['POST'])\ndef add_product():\n    new_product = request.json\n    new_product['id'] = len(products) + 1\n    products.append(new_product)\n    # Vulnerability: Writing beyond the bounds of the products list\n    products[len(products)] = new_product  # This line introduces the buffer overflow vulnerability\n    return jsonify(new_product), 201\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=5000)\n\n",
    "injection_notes": "A line was added in the add_product function that writes to an index equal to the length of the products list, which can lead to a buffer overflow, as it writes outside the intended bounds of the list."
  }
}